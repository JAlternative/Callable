<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Взять данные из postgresql и положить их в influxDB" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">goodt-pochta-loadqa.goodt.me</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Ссылка для перехода в приложение</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.desc">протокол https/http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="influx_db" elementType="Argument">
            <stringProp name="Argument.name">influx_db</stringProp>
            <stringProp name="Argument.value">lkkbd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="influx_url" elementType="Argument">
            <stringProp name="Argument.name">influx_url</stringProp>
            <stringProp name="Argument.value">${__P(influx_db_url,http://localhost:8086/write?db=lkkbd)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="influx_application" elementType="Argument">
            <stringProp name="Argument.name">influx_application</stringProp>
            <stringProp name="Argument.value">${__P(influx_db_application,apple)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="influx_measurement" elementType="Argument">
            <stringProp name="Argument.name">influx_measurement</stringProp>
            <stringProp name="Argument.value">${__P(influx_db_measurement,belialfff)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="count_free_shifts" elementType="Argument">
            <stringProp name="Argument.name">count_free_shifts</stringProp>
            <stringProp name="Argument.value">1200000</stringProp>
            <stringProp name="Argument.desc">Сколько нужно создать свободных смен</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countToken" elementType="Argument">
            <stringProp name="Argument.name">countToken</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countUsers" elementType="Argument">
            <stringProp name="Argument.name">countUsers</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countsUsersOnOM" elementType="Argument">
            <stringProp name="Argument.name">countsUsersOnOM</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUTSTAFF_URL" elementType="Argument">
            <stringProp name="Argument.name">OUTSTAFF_URL</stringProp>
            <stringProp name="Argument.value">lkk-load-qa.goodt.tech</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url"></stringProp>
            <stringProp name="Authorization.username">superuser</stringProp>
            <stringProp name="Authorization.password">Wsxzaq1!</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC outstaff-lk-stage.goodt.me" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">db_outstaff</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://185.241.193.30/wfm_cpa</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">mQimWaXBcDdTb</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">s_khoroshkov</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC magnit" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">db_magnit</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://185.86.147.35/hrportal_magnit</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">FWFM77W1tRlAN</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">s_khoroshkov</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">${influx_url}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">${influx_application}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">${influx_measurement}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">[US|TC|&lt;|&gt;].*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">99;95;90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex2" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex2</stringProp>
              <stringProp name="Argument.value">[TC|&lt;|&gt;].*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="Подключенные библиотеки для записи данных в InfluxDB" enabled="false">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">//https://mvnrepository.com/artifact/org.influxdb/influxdb-java/2.23
//https://square.github.io/retrofit/
//https://github.com/square/retrofit/blob/trunk/retrofit-converters/moshi/README.md
//https://jar-download.com/download-handling.php
//https://mvnrepository.com/artifact/com.squareup.okhttp3/logging-interceptor/4.10.0
//http://www.java2s.com/ref/jar/download-moshi110jar-file.html
//https://jar-download.com/download-handling.php</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="________________________________________________________________________________________" enabled="false"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Запись метрик в Grafana" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Запросы в БД" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1. Размер БД (общий размер всех таблиц в динамике) " enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_size_pretty(pg_database_size(&apos;wfm_cpa&apos;));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">wfm_cpa_size</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2.1. Размер индексов в динамике request" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_size_pretty(pg_indexes_size(&apos;request&apos;));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">indexes_size_request</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2.2. Размер индексов в динамике response" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_size_pretty(pg_indexes_size(&apos;response&apos;));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">indexes_size_response</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2.3. Размер индексов в динамике response_history" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_size_pretty(pg_indexes_size(&apos;response_history&apos;));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">indexes_size_response_history</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="3.1. Размер самых больших таблиц в динамике request" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_size_pretty(pg_table_size(&apos;request&apos;));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">table_size_request</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="3.2. Размер самых больших таблиц в динамике response" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_size_pretty(pg_table_size(&apos;response&apos;));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">table_size_response</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="3.3. Размер самых больших таблиц в динамике response_history" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_size_pretty(pg_table_size(&apos;response_history&apos;));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">table_size_response_history</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="4. Статистика выполнения самых тяжелых запросов с интервалом 5 минут. (сохранять pg_stats и обнулять)" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT query, calls, total_exec_time, min_exec_time, mean_exec_time, max_exec_time, rows
FROM pg_stat_statements
WHERE calls &gt; 10
ORDER BY max_exec_time DESC
LIMIT 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">query, calls, total_exec_time, min_exec_time, mean_exec_time, max_exec_time, rows</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="4.1. Статистика выполнения самых тяжелых запросов с интервалом 5 минут. (сохранять pg_stats и обнулять)" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_stat_statements_reset();</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">REQUEST_ID</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="5. row_to_json" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT row_to_json(T)
FROM
	(SELECT checkpoints_timed,
			checkpoints_req,
			checkpoint_write_time,
			checkpoint_sync_time,
			current_setting(&apos;block_size&apos;)::int*buffers_checkpoint AS buffers_checkpoint,
			current_setting(&apos;block_size&apos;)::int*buffers_clean AS buffers_clean,
			maxwritten_clean,
			current_setting(&apos;block_size&apos;)::int*buffers_backend AS buffers_backend,
			buffers_backend_fsync,
			current_setting(&apos;block_size&apos;)::int*buffers_alloc AS buffers_alloc
	FROM pg_stat_bgwriter) T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">row_to_json</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="6. round" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT round(sum(blks_hit)*100/sum(blks_hit+blks_read), 2)
FROM pg_stat_database</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">round</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="7. md5" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT md5(
	json_build_object(
		&apos;extensions&apos;, (
			SELECT array_agg(extname) FROM (
				SELECT extname
				FROM pg_extension
				ORDER BY extname
			) AS e
		),
		&apos;settings&apos;, (
			SELECT json_object(array_agg(name), array_agg(setting)) FROM (
				SELECT name, setting
				FROM pg_settings
				WHERE name != &apos;application_name&apos;
				ORDER BY name
			) AS s
		)
	)::text);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">md5</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="8. max_connections" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT setting::int FROM pg_settings WHERE name = &apos;max_connections&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">max_connections</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="9. json_object_agg" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT json_object_agg(datname, row_to_json(T)) FROM (
	SELECT datname,
			numbackends,
			xact_commit,
			xact_rollback,
			blks_read,
			blks_hit,
			tup_returned,
			tup_fetched,
			tup_inserted,
			tup_updated,
			tup_deleted,
			conflicts,
			temp_files,
			temp_bytes,
			deadlocks
	FROM pg_stat_database where datname is not null) T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">json_object_agg</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="10. discovery" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">WITH T AS (
	SELECT
		datname AS &quot;{#DBNAME}&quot;
	FROM pg_database
	WHERE
		NOT datistemplate
		AND datname != &apos;postgres&apos;
)
SELECT &apos;{&quot;data&quot;:&apos;|| regexp_replace(coalesce(json_agg(T), &apos;[]&apos;::json)::text, E&apos;[\\n\\r\\s]+&apos;, &apos;&apos;, &apos;g&apos;) || &apos;}&apos;
FROM T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">discovery</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="11. frozenxid" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT row_to_json(T)
FROM (
	SELECT
		extract(epoch FROM now())::integer AS ts,
		((1 - max(age(d.datfrozenxid))::double precision /
		current_setting(&apos;autovacuum_freeze_max_age&apos;)::bigint) * 100)::numeric(9,6)
		AS prc_before_av,
		((1 - abs(max(age(d.datfrozenxid))::double precision /
		(1::bigint &lt;&lt; (min(t.typlen)*8)))) * 100)::numeric(9,6)
		AS prc_before_stop
	FROM pg_database d CROSS JOIN pg_type t
	WHERE t.typname = &apos;xid&apos;
) T;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">frozenxid</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="12. locks" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">WITH T AS
	(SELECT db.datname dbname,
			lower(replace(Q.mode, &apos;Lock&apos;, &apos;&apos;)) AS MODE,
			coalesce(T.qty, 0) val
	FROM pg_database db
	JOIN (
			VALUES (&apos;AccessShareLock&apos;) ,(&apos;RowShareLock&apos;) ,(&apos;RowExclusiveLock&apos;) ,(&apos;ShareUpdateExclusiveLock&apos;) ,(&apos;ShareLock&apos;) ,(&apos;ShareRowExclusiveLock&apos;) ,(&apos;ExclusiveLock&apos;) ,(&apos;AccessExclusiveLock&apos;)) Q(MODE) ON TRUE NATURAL
	LEFT JOIN
		(SELECT datname,
			MODE,
			count(MODE) qty
		FROM pg_locks lc
		RIGHT JOIN pg_database db ON db.oid = lc.database
		GROUP BY 1, 2) T
	WHERE NOT db.datistemplate
	ORDER BY 1, 2)
SELECT json_object_agg(dbname, row_to_json(T2))
FROM
	(SELECT dbname,
			sum(val) AS total,
			sum(CASE
					WHEN MODE = &apos;accessexclusive&apos; THEN val
				END) AS accessexclusive,
			sum(CASE
					WHEN MODE = &apos;accessshare&apos; THEN val
				END) AS accessshare,
			sum(CASE
					WHEN MODE = &apos;exclusive&apos; THEN val
				END) AS EXCLUSIVE,
			sum(CASE
					WHEN MODE = &apos;rowexclusive&apos; THEN val
				END) AS rowexclusive,
			sum(CASE
					WHEN MODE = &apos;rowshare&apos; THEN val
				END) AS rowshare,
			sum(CASE
					WHEN MODE = &apos;share&apos; THEN val
				END) AS SHARE,
			sum(CASE
					WHEN MODE = &apos;sharerowexclusive&apos; THEN val
				END) AS sharerowexclusive,
			sum(CASE
					WHEN MODE = &apos;shareupdateexclusive&apos; THEN val
				END) AS shareupdateexclusive
	FROM T
	GROUP BY dbname) T2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">locks</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="13. replication" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT
	CASE
		WHEN NOT pg_is_in_recovery() THEN
			&apos;SELECT 0 AS value&apos;
		WHEN current_setting(&apos;server_version_num&apos;)::integer &lt; 100000 THEN
			&apos;SELECT &apos;
				&apos;CASE WHEN pg_last_xlog_receive_location() = pg_last_xlog_replay_location() &apos;
					&apos;THEN 0 &apos;
				&apos;ELSE COALESCE(EXTRACT(EPOCH FROM now() - pg_last_xact_replay_timestamp())::integer, 0) &apos;
				&apos;END AS value&apos;
		WHEN current_setting(&apos;server_version_num&apos;)::integer &gt;= 100000 THEN
			&apos;SELECT &apos;
				&apos;CASE WHEN pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() &apos;
					&apos;THEN 0 &apos;
				&apos;ELSE COALESCE(EXTRACT(EPOCH FROM now() - pg_last_xact_replay_timestamp())::integer, 0) &apos;
				&apos;END AS value&apos;
	END</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">replication</stringProp>
            <stringProp name="TestPlan.comments">SELECT pg_is_in_recovery()::int</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="14. pg_is_in_recovery" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_is_in_recovery()::int</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">pg_is_in_recovery</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="15. scans" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">WITH T AS (
	SELECT
		sum(CASE WHEN relkind IN (&apos;r&apos;, &apos;t&apos;, &apos;m&apos;) THEN pg_stat_get_numscans(oid) END) seq,
		sum(CASE WHEN relkind = &apos;i&apos; THEN pg_stat_get_numscans(oid) END) idx
	FROM pg_class
	WHERE relkind IN (&apos;r&apos;, &apos;t&apos;, &apos;m&apos;, &apos;i&apos;)
)
SELECT row_to_json(T)
FROM T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">scans</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="16. date_part" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT date_part(&apos;epoch&apos;, now() - pg_postmaster_start_time())::int</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">date_part</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="17. indexes" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">WITH T AS (
	SELECT
		indexname AS &quot;{#INDXNAME}&quot;
	FROM pg_indexes
	WHERE
		indexname IN (&apos;schedule_request_date_idx&apos;,
&apos;schedulerequest_pkey&apos;,
&apos;schedule_request_outer_id_idx&apos;,
&apos;idx_29358_fk1gfcapovv78p65qlac4q09pdp&apos;,
&apos;idx_29358_fk2o7m7r9kls60bbkowp23i57og&apos;,
&apos;idx_29358_fksa76137tgm85k41stw978mh8g&apos;,
&apos;schedule_request_alias_id_position_id_idx&apos;,
&apos;idx_29358_fkkm17wnqpueavea5ruklca6kld&apos;,
&apos;shift_exchange_status_idx&apos;,
&apos;shift_extended_status_idx&apos;,
&apos;shift_original_id_idx&apos;,
&apos;shift_outer_id_idx&apos;,
&apos;shift_pos_cat_dates_idx&apos;,
&apos;shift_updated_idx&apos;,
&apos;shift_pkey&apos;,
&apos;uks9hisaxbdbswqn2pktiumao9p&apos;,
&apos;idx_shift_exchange_rule&apos;,
&apos;idx_29424_shift_start_end_date_idx&apos;,
&apos;idx_29424_shift_fte_position_group_idx&apos;,
&apos;idx_29424_fkcagbyytrenkxylikhhp6vo824&apos;,
&apos;shift_approve_doc_idx&apos;,
&apos;shift_employee_position_id_idx&apos;,
&apos;idx_29424_shift_planned_shift_id_idx&apos;)
)
SELECT &apos;{&quot;data&quot;:&apos;|| regexp_replace(coalesce(json_agg(T), &apos;[]&apos;::json)::text, E&apos;[\\n\\r\\s]+&apos;, &apos;&apos;, &apos;g&apos;) || &apos;}&apos;
FROM T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">indexes</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="18. tables" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">WITH T AS (
	SELECT
		tablename AS &quot;{#TBLNAME}&quot;
	FROM pg_catalog.pg_tables
	WHERE
		tablename IN (&apos;shift&apos;, &apos;schedule_requestm&apos;, &apos;spring_session&apos;, &apos;spring_session_journal&apos;)
)
SELECT &apos;{&quot;data&quot;:&apos;|| regexp_replace(coalesce(json_agg(T), &apos;[]&apos;::json)::text, E&apos;[\\n\\r\\s]+&apos;, &apos;&apos;, &apos;g&apos;) || &apos;}&apos;
FROM T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">tables</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="19. indexes_stats" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT json_object_agg(indexrelname, row_to_json(T)) FROM (
	SELECT indexrelname,
	        idx_scan,
			idx_tup_read,
			idx_tup_fetch
	FROM pg_stat_user_indexes where indexrelname is not null) T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">indexes_stats</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="20. top_calls" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT json_agg(T) FROM (
select query,
        calls,
        total_exec_time,
        mean_exec_time,
        rows
from pg_stat_statements
order by calls desc
limit 10) T</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">top_calls</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="20. reset" enabled="true">
            <stringProp name="dataSource">db_outstaff</stringProp>
            <stringProp name="query">SELECT pg_stat_reset()</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">resseter</stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler Запись в Influx" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">	   import org.influxdb.InfluxDB;
        import org.influxdb.InfluxDBFactory;
	   import org.influxdb.dto.Point;
	   import org.influxdb.dto.Query;
	   import java.time.Instant; 
	   import java.time.LocalDateTime;
	   import java.time.format.DateTimeFormatter;
        import java.util.concurrent.TimeUnit;
        

	   private static final String sizeDb = &quot;sizeDb&quot;;
    	   private static final String sizeIndexRequest = &quot;sizeIndexRequest&quot;;
    	   private static final String sizeIndexResponse = &quot;sizeIndexResponse&quot;;
    	   private static final String sizeIndexResponseHistory = &quot;sizeIndexResponseHistory&quot;;
    	   private static final String sizeTableRequest = &quot;sizeTableRequest&quot;;
    	   private static final String sizeTableResponse = &quot;sizeTableResponse&quot;;
    	   private static final String sizeTableResponseHistory = &quot;sizeTableResponseHistory&quot;;
    	   private static final String query = &quot;query&quot;;
    	   private static final String calls = &quot;calls&quot;;
    	   private static final String total_exec_time = &quot;total_exec_time&quot;;
    	   private static final String min_exec_time = &quot;min_exec_time&quot;;
    	   private static final String mean_exec_time = &quot;mean_exec_time&quot;;
    	   private static final String max_exec_time = &quot;max_exec_time&quot;;
    	   private static final String rows = &quot;rows&quot;;
    	   private static final String rowToJson = &quot;row_to_json&quot;;
    	   private static final String round = &quot;round&quot;;
    	   private static final String md5 = &quot;md5&quot;;
    	   private static final String max_connections = &quot;max_connections&quot;;
    	   private static final String json_object_agg = &quot;json_object_agg&quot;;
    	   private static final String discovery = &quot;discovery&quot;;
    	   private static final String frozenxid = &quot;frozenxid&quot;;
    	   private static final String locks = &quot;locks&quot;;
    	   private static final String replication = &quot;replication&quot;;
    	   private static final String pgIsInRecovery = &quot;pg_is_in_recovery&quot;;
    	   private static final String scans = &quot;scans&quot;;
    	   private static final String datePart = &quot;date_part&quot;;
    	   private static final String indexes = &quot;indexes&quot;;
    	   private static final String tables = &quot;tables&quot;;
    	   private static final String indexesStats = &quot;indexes_stats&quot;;
    	   private static final String topCalls = &quot;top_calls&quot;;
    	   
    	   
    	   
    	   

	   String influxDbUrl = &quot;http://localhost:8086&quot;;
        String influxDbDatabase = vars.get(&quot;influx_db&quot;);
        String influxDbMeasurement = vars.get(&quot;influx_measurement&quot;);
        InfluxDB influxDB = InfluxDBFactory.connect(influxDbUrl);
        influxDB.query(new Query(&quot;CREATE DATABASE &quot; + influxDbDatabase));
        influxDB.setDatabase(influxDbDatabase);

        LocalDateTime currentDateTime = LocalDateTime.now();
	   DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);
	   String formattedDateTime = currentDateTime.format(formatter);

        Point.Builder pointBuilder = Point.measurement(influxDbMeasurement);
	   Integer sizeWpa = Integer.valueOf(vars.get(&quot;wfm_cpa_size_#&quot;));
	   Integer indexesSizeRequest = Integer.valueOf(vars.get(&quot;indexes_size_request_#&quot;));
	   Integer indexesSizeResponse = Integer.valueOf(vars.get(&quot;indexes_size_response_#&quot;));
	   Integer indexesSizeResponseHistory = Integer.valueOf(vars.get(&quot;indexes_size_response_history_#&quot;));
	   Integer tableSizeRequest = Integer.valueOf(vars.get(&quot;table_size_request_#&quot;));
	   Integer tableSizeResponse = Integer.valueOf(vars.get(&quot;table_size_response_#&quot;));
	   Integer tableSizeResponseHistory = Integer.valueOf(vars.get(&quot;table_size_response_history_#&quot;));
	   String rowToJsonValue = formattedDateTime + &quot; : &quot; + vars.get(rowToJson + &quot;_1&quot;);
	   Double roundValue = Double.valueOf(vars.get(round + &quot;_1&quot;));
	   String md5Value = formattedDateTime + &quot; : &quot; + vars.get(md5 + &quot;_1&quot;);
	   Integer maxConnectionsValue = Integer.valueOf(vars.get(max_connections + &quot;_1&quot;));
	   String jsonObjectAggValue = formattedDateTime + &quot; : &quot; + vars.get(json_object_agg + &quot;_1&quot;);
	   String discoveryValue = formattedDateTime + &quot; : &quot; + vars.get(discovery + &quot;_1&quot;);
	   String frozenxidValue = formattedDateTime + &quot; : &quot; + vars.get(frozenxid + &quot;_1&quot;);
	   String locksValue = formattedDateTime + &quot; : &quot; + vars.get(locks + &quot;_1&quot;);
	   String replicationValue = formattedDateTime + &quot; : &quot; + vars.get(replication + &quot;_1&quot;);
	   Integer pgIsInRecoveryValue = Integer.valueOf(vars.get(pgIsInRecovery + &quot;_1&quot;));
	   String scansValue = formattedDateTime + &quot; : &quot; + vars.get(scans + &quot;_1&quot;);
	   Integer datePartValue = Integer.valueOf(vars.get(datePart + &quot;_1&quot;));
	   String indexesValue = formattedDateTime + &quot; : &quot; + vars.get(indexes + &quot;_1&quot;);
	   String tablesValue = formattedDateTime + &quot; : &quot; + vars.get(tables + &quot;_1&quot;);
	   String indexesStatsValue = formattedDateTime + &quot; : &quot; + vars.get(indexesStats + &quot;_1&quot;);
	   String topCallsValue = formattedDateTime + &quot; : &quot; + vars.get(topCalls + &quot;_1&quot;);
	   
	   
	   
	   
	   if (sizeWpa &gt; 0) {
	   	pointBuilder.addField(sizeDb, Integer.valueOf(vars.get(&quot;wfm_cpa_size_1&quot;).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;)));
	   }

	   if (indexesSizeRequest &gt; 0) {
	   	pointBuilder.addField(sizeIndexRequest, Integer.valueOf(vars.get(&quot;indexes_size_request_1&quot;).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;)));
	   }

	   if (indexesSizeResponse &gt; 0) {
	   	pointBuilder.addField(sizeIndexResponse, Integer.valueOf(vars.get(&quot;indexes_size_response_1&quot;).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;)));
	   }

	   if (indexesSizeResponseHistory &gt; 0) {
	   	pointBuilder.addField(sizeIndexResponseHistory, Integer.valueOf(vars.get(&quot;indexes_size_response_history_1&quot;).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;)));
	   }

	   if (tableSizeRequest &gt; 0) {
	   	pointBuilder.addField(sizeTableRequest, Integer.valueOf(vars.get(&quot;table_size_request_1&quot;).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;)));
	   }

	   if (tableSizeResponse &gt; 0) {
	   	pointBuilder.addField(sizeTableResponse, Integer.valueOf(vars.get(&quot;table_size_response_1&quot;).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;)));
	   }

	   if (tableSizeResponseHistory &gt; 0) {
	   	pointBuilder.addField(sizeTableResponseHistory, Integer.valueOf(vars.get(&quot;table_size_response_history_1&quot;).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;)));
	   }

	   if (rowToJsonValue != null) {
	   	pointBuilder.addField(rowToJson, rowToJsonValue);	
	   }

	   if (roundValue != null) {
	   	pointBuilder.addField(round, roundValue);
	   }

	   if (md5Value != null) {
	   	pointBuilder.addField(md5, md5Value);
	   }

	   if (maxConnectionsValue != null) {
	   	pointBuilder.addField(max_connections, maxConnectionsValue);
	   }

	   if (jsonObjectAggValue != null) {
	   	pointBuilder.addField(json_object_agg, jsonObjectAggValue);
	   }

	   if (discoveryValue != null) {
	   	pointBuilder.addField(discovery, discoveryValue);
	   }

	   if (frozenxidValue != null) {
	   	pointBuilder.addField(frozenxid, frozenxidValue);
	   }

	   if (locksValue != null) {
	   	pointBuilder.addField(locks, locksValue);
	   }
	   
	   if (replicationValue != null) {
	   	pointBuilder.addField(replication, replicationValue);
	   }

	   if (pgIsInRecoveryValue != null) {
	   	pointBuilder.addField(pgIsInRecovery, pgIsInRecoveryValue);
	   }

	   if (scansValue != null) {
	   	pointBuilder.addField(scans, scansValue);
	   }

	   if (datePartValue != null) {
	   	pointBuilder.addField(datePart, datePartValue);
	   }

	   if (indexesValue != null) {
	   	pointBuilder.addField(indexes, indexesValue);
	   }

	   if (tablesValue != null) {
	   	pointBuilder.addField(tables, tablesValue);
	   }

	   if (indexesStatsValue != null) {
	   	pointBuilder.addField(indexesStats, indexesStatsValue);
	   }

	   if (topCallsValue != null) {
	   	pointBuilder.addField(topCalls, topCallsValue);
	   }

	   
	   
	   

	   
	   

	   pointBuilder.time(Instant.now().toEpochMilli(), TimeUnit.MILLISECONDS);
	   influxDB.write(pointBuilder.build());
	   Integer lenght = Integer.valueOf(vars.get(&quot;query_#&quot;));
	   Point.Builder pointBuilderHeavyRequests = Point.measurement(influxDbMeasurement);
	   
	   for (int a = 1; a &lt;=lenght; a++) {
	   LocalDateTime localDateTime = LocalDateTime.now();
	   String queryValue = vars.get(&quot;query_&quot; + a);
	   int callsValue = Integer.valueOf(vars.get(&quot;calls_&quot; + a).replaceAll(&quot;[^0-9]&quot;, &quot;&quot;));
	   double totalExecTime = Double.valueOf(vars.get(&quot;total_exec_time_&quot; + a));
	   double minExecTime = Double.valueOf(vars.get(&quot;min_exec_time_&quot; + a));
	   double meanExecTime = Double.valueOf(vars.get(&quot;mean_exec_time_&quot; + a));
	   double maxExecTime = Double.valueOf(vars.get(&quot;max_exec_time_&quot; + a));
	   int rowsValue = Integer.valueOf(vars.get(&quot;rows_&quot; + a));
	   String queryAndNumberField = &quot;Field №&quot; + a + &quot; &quot; + &quot;Time: &quot; + localDateTime.toString() + &quot; --------&gt; SqlQuery: &quot; + queryValue;
        pointBuilderHeavyRequests.time(Instant.now().toEpochMilli(), TimeUnit.MILLISECONDS);
        pointBuilderHeavyRequests.addField(query, queryAndNumberField);
        pointBuilderHeavyRequests.addField(calls, callsValue);
        pointBuilderHeavyRequests.addField(total_exec_time, totalExecTime);
        pointBuilderHeavyRequests.addField(min_exec_time, minExecTime);
        pointBuilderHeavyRequests.addField(mean_exec_time, meanExecTime);
        pointBuilderHeavyRequests.addField(max_exec_time, maxExecTime);
        pointBuilderHeavyRequests.addField(rows, rowsValue);
        influxDB.write(pointBuilderHeavyRequests.build());
    	   }
	   

	   

	   


  </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">120000</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <intProp name="calcMode">0</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>false</success>
            <label>false</label>
            <code>false</code>
            <message>false</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
